# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
# 임지윤 <dtrlml26@ajou.ac.kr>, 2020
# 임지윤 <dtrlml26@ajou.ac.kr>, 2020
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 23:16+0300\n"
"PO-Revision-Date: 2015-05-24 19:18+0000\n"
"Last-Translator: 임지윤 <dtrlml26@ajou.ac.kr>, 2020\n"
"Language-Team: Korean (http://app.transifex.com/git-extensions/git-extensions-manual/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ..\maintenance.rst:2
msgid "Maintenance"
msgstr "유지"

#: ..\maintenance.rst:4
msgid ""
"In this chapter some of the functions to maintain a repository are "
"discussed."
msgstr "이 챕터에서는 리포지토리를 유지하는 몇 가지 기능에 대해 설명합니다."

#: ..\maintenance.rst:7
msgid "Compress Git database"
msgstr "깃 데이터베이스 압축"

#: ..\maintenance.rst:9
msgid ""
"Git will create a lot of files. You can run the ``Compress git database`` to"
" pack all small files building up a repository into one big file. Git will "
"also garbage collect all unused objects that are older then 15 days. When a "
"database is fragmented into a many small files compressing the database can "
"increase performance."
msgstr "깃은 많은 파일을 생성합니다. \"깃 데이터베이스 압축\"을 실행하여 리포지토를 구성하는 모든 작은 파일을 하나의 큰 파일로 압축 할 수 있습니다. 깃은 또한 15일이 지난 사용하지 않은 모든 객체를 쓰레기로 수집합니다. 데이터베이스가 여러 개의 작은 파일로 분할 될 때 데이터베이스를 압축하는 것은 성능을 향상시킬 수 있습니다."

#: ..\maintenance.rst:16
msgid "Recover lost objects"
msgstr "손실한 객체 복구"

#: ..\maintenance.rst:18
msgid ""
"If you accidently deleted a commit you can try to recover it using the "
"``Recover lost objects`` function. A dialog will show you all dangling "
"objects and will allow you to review and recover them."
msgstr "실수로 커미트를 삭제 한 경우 \"손실한 객체 복구\" 기능을 사용하여 커미트 복구를 시도 할 수 있습니다. 대화 상자는 매달린 모든 객체를 보여주고 이를 검토하고 복구할 수 있습니다."

#: ..\maintenance.rst:23
msgid ""
"Normally Git will not delete files right away when you remove something from"
" your repository. The reason for this is that you can restore deleted items "
"if you need to. Git will delete removed items when they are older then 15 "
"days and you run ``Compress git database``."
msgstr "일반적으로 깃은 리포지토리에서 무언가를 제거 할 때 바로 파일을 삭제하지 않습니다. 그 이유는 필요한 경우 삭제된 항목을 복원 할 수 있기 때문입니다. 깃은 제거 된 항목이 15일이 넘으면 삭제하고 \"깃 데이터베이스 압축\"을 실행합니다."

#: ..\maintenance.rst:29
msgid ""
"There are several functions to help you find the lost items. By default Git "
"Extensions will only show commits. To show all items, just uncheck the "
"``Show only commits`` option. The other options can be checked/unchecked to "
"get more/less results. Double-click on on item to view the content. When you"
" located the item you want to recover you can tag it using the ``Tag "
"selected object`` button."
msgstr "손실된 항목을 찾는 데 도움이 되는 몇 가지 기능이 있습니다. 기본적으로 깃 익스텐션은 커미트만 표시합니다. 모든 항목을 표시하려면 \"커미트만 보기\" 옵션을 선택 취소합니다. 더 많은/더 적은 결과를 얻기 위해 다른 옵션을 선택/선택 취소 할 수 있습니다. 내용을 보려면 항목을 두 번 클릭해야 합니다. 복구하려는 항목을 찾았으면 \"선택된 객체 태그\" 버튼을 사용하여 태그를 지정할 수 있습니다."

#: ..\maintenance.rst:34
msgid ""
"Git Extensions also is able to tag all lost objects. Doing this will make "
"all lost objects visible again making it very easy to locate the commit(s) "
"you would like to recover. After recovering a commit using the ``Tag all "
"lost commits`` button, you can remove all tags using the ``Delete all "
"LOST_AND_FOUND tags`` button."
msgstr "깃 익스텐션은 또한 모든 손실된 객체에 태그를 지정할 수 있습니다. 이렇게 하는 것은 손실된 모든 객체를 다시 볼 수 있게 하여 복구하려는 커미트(들)를 매우 쉽게 찾을 수 있습니다. \"손실된 모든 객체에 태그 지정\" 버튼을 사용하여 커미트를 복구한 후\"손실 및 발견 태그 모두 삭제\" 버튼을 사용하여 모든 태그를 제거 할 수 있습니다."

#: ..\maintenance.rst:41
msgid "Fix user names"
msgstr "사용자 이름 수정"

#: ..\maintenance.rst:43
msgid ""
"When someone accidentally committed using a wrong username this can be fixed"
" using the ``Edit .mailmap`` function. Git will use the username for an "
"email address when it is set in the ``.mailmap`` file."
msgstr "누군가의 실수로 잘못된 사용자 이름을 사용하여 커미트한 경우 \"수정 .mailmap\" 기능을 사용하여 이 문제를 해결할 수 있습니다. 깃은 \".mailmap\" 파일에 이메일 주소가 설정되면 이메일 주소에 사용자 이름을 사용할 것입니다."

#: ..\maintenance.rst:48
msgid "Fix user name using commit email:"
msgstr "커미트 이메일을 사용하여 사용자 이름 수정 :"

#: ..\maintenance.rst:54
msgid "Fix email address using commit email:"
msgstr "커미트 이메일을 사용하여 이메일 주소 수정:"

#: ..\maintenance.rst:60
msgid "Fix email address and name using commit email:"
msgstr "커미트 이메일을 사용하여 이메일 주소와 이름 수정"

#: ..\maintenance.rst:66
msgid "Fix email address and name using commit name and email:"
msgstr "커미트 이름 및 이메일을 사용하여 이메일 주소 및 이름 수정"

#: ..\maintenance.rst:73
msgid "Ignore files"
msgstr "파일 무시"

#: ..\maintenance.rst:75
msgid ""
"Git will track all files that are in the working directory. Normally you do "
"not want to exclude all files that are created by the compiler. You can add "
"files that should be ignored to the .gitignore file. You can use wildcards "
"and regular expressions. All entries are case sensitive. The button ``Add "
"default ignores`` will add files that should be ignored when using Visual "
"Studio."
msgstr "깃은 작업 디렉토리에있는 모든 파일을 추적합니다. 일반적으로 컴파일러에 의해 생성된 모든 파일을 제외하고 싶지는 않습니다. 무시해야하는 파일을 .gitignore 파일에 추가 할 수 있습니다. 와일드 카드와 정규식을 사용할 수 있습니다. 모든 항목은 대소문자를 구분합니다. \"무시 기본값 추가\" 버튼은 비주얼 스튜디오를 사용할 때 무시해야하는 파일을 추가합니다."

#: ..\maintenance.rst:81
msgid "A short overview of the syntax:"
msgstr "구문에 대한 간략한 개요:"

#: ..\maintenance.rst:84
msgid "#"
msgstr "#"

#: ..\maintenance.rst:84
msgid "Lines started with ``#`` are handled as comments"
msgstr "\"#\"으로 시작하는 행은 주석으로 처리됩니다."

#: ..\maintenance.rst:86
msgid "!"
msgstr "!"

#: ..\maintenance.rst:86
msgid "Lines started with ``!`` are exclude patterns"
msgstr "\"!\"로 시작하는 행은 제외된 패턴입니다."

#: ..\maintenance.rst:88
msgid "[Dd]"
msgstr "[Dd]"

#: ..\maintenance.rst:88
msgid "Characters inside ``[..]`` means that 1 of the characters must match"
msgstr "\"[..]\" 안의 문자는 문자 중 1개가 일치해야 함을 의미합니다."

#: ..\maintenance.rst:90
msgid "\\*"
msgstr "\\*"

#: ..\maintenance.rst:90
msgid "Wildcard"
msgstr "와일드카드"

#: ..\maintenance.rst:92 ..\maintenance.rst:95
msgid "/"
msgstr "/"

#: ..\maintenance.rst:92
msgid ""
"A leading slash matches the beginning of the pathname; for example, ``/*.c``"
" matches ``cat-file.c`` but not ``mozilla-sha1/sha1.c``"
msgstr "선행 슬래시는 경로 이름의 시작과 일치합니다; 예를 들어, \"/*.c\"는 \"cat-file.c\"와 일치하지만 \"mozilla-sha1/sha1.c\"와는 일치하지 않습니다. "

#: ..\maintenance.rst:95
msgid ""
"If the pattern ends with a slash, it is removed for the purpose of the "
"following description, but it would only find a match with a directory. In "
"other words, foo/ will match a directory foo and paths underneath it, but "
"will not match a regular file or a symbolic link foo (this is consistent "
"with the way how pathspec works in general in git)."
msgstr "패턴이 슬래시로 끝나면 다음 설명을 위해 제거되지만 디렉토리와 일치하는 항목만 찾습니다. 즉, foo/는 디렉토리 foo 및 그 아래의 경로와 일치하지만 일반 파일 또는 기호 링크 foo와 일치하지 않습니다 (이것은 일반적으로 깃에서 경로 지정이 작동하는 방식과 일치합니다)."

#: ..\maintenance.rst:100
msgid ""
"For more `detailed information "
"<http://www.kernel.org/pub/software/scm/git/docs/gitignore.html>`_."
msgstr "더 자세한 정보는 '<http://www.kernel.org/pub/software/scm/git/docs/gitignore.html>' 을 참조하시길 바랍니다."
