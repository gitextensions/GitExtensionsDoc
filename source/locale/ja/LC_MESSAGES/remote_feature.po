# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
# Yuki Shira <shirayuking@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-28 18:30+0300\n"
"PO-Revision-Date: 2015-05-24 19:19+0000\n"
"Last-Translator: Yuki Shira <shirayuking@gmail.com>, 2023\n"
"Language-Team: Japanese (http://app.transifex.com/git-extensions/git-extensions-manual/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ..\remote_feature.rst:2
msgid "Remote feature"
msgstr "リモート機能"

#: ..\remote_feature.rst:4
msgid ""
"Git is a distributed source control management system. This means that all "
"changes you make are local. When you commit changes, you only commit them to"
" your local repository. To publish your local changes you need to push. In "
"order to get changes committed by others, you need to pull."
msgstr "Git は分散型ソースコントロール管理システムです。つまり、あなたが行うすべての変更はローカルなものであるということです。変更をコミットするときは、自分のローカルリポジトリにのみコミットします。自分のローカルな変更を公開するには、プッシュする必要があります。他の人がコミットした変更を取得するためには、プルする必要があります。"

#: ..\remote_feature.rst:9
msgid "Manage remote repositories"
msgstr "リモートリポジトリの管理"

#: ..\remote_feature.rst:11
msgid "You can manage the remote repositories in the ``Remotes`` menu."
msgstr "リモートリポジトリは「リモート」メニューで管理できます。"

#: ..\remote_feature.rst:15
msgid ""
"When you cloned your repository from a public repository, this remote is "
"already configured. You can rename each remote for easy recognition. The "
"default name after cloning a remote is ``origin``. If you use PuTTY as SSH "
"client you can also enter the private key file for each remote. Git "
"Extensions will load the key when needed. How to create a private key file "
"is described in the next paragraph."
msgstr "公開リポジトリからリポジトリをクローンした場合、このリモートは既に設定されています。各リモートの名前を変更することで、認識しやすくできます。リモートをクローンした後のデフォルトの名前は ``origin`` です。SSH クライアントとして PuTTY を使用している場合は、各リモートの秘密鍵ファイルを入力することもできます。Git Extensions は必要なときに鍵を読み込めます。秘密鍵ファイルの作成方法については、次の段落で説明します。"

#: ..\remote_feature.rst:22
msgid ""
"In the ``Default pull behaviour`` tab you can configure the branches that "
"need to be pulled and merged by default. If you configure this correctly you"
" will not need to choose a branch when you pull or push. There are two "
"buttons on this dialog:"
msgstr "「デフォルトのプル動作」タブでは、デフォルトでプルおよびマージする必要があるブランチを設定できます。これを正しく設定すれば、プルやプッシュの際にブランチを選択する必要がなくなります。このダイアログには 2 つのボタンがあります:"

#: ..\remote_feature.rst:26
msgid "Prune remote branches"
msgstr "リモートブランチをプルーン"

#: ..\remote_feature.rst:26
msgid "Throw away remote branches that do not exist on the remote anymore."
msgstr "リモートに存在しなくなったリモートブランチを破棄します。"

#: ..\remote_feature.rst:28
msgid "Update all remote branch info"
msgstr "リモートブランチ情報をすべて更新"

#: ..\remote_feature.rst:28
msgid "Fetch all remote branch information."
msgstr "リモートブランチの情報をすべて取得します。"

#: ..\remote_feature.rst:33
msgid ""
"After cloning a repository you do not need to configure all remote branches "
"manually. Instead you can checkout the remote branch and choose to create a "
"local tracking branch."
msgstr "リポジトリをクローンした後、すべてのリモートブランチを手動で設定する必要はありません。その代わりに、リモートブランチをチェックアウトして、ローカルの追跡ブランチを作成することを選択できます。"

#: ..\remote_feature.rst:37
msgid "Create SSH key"
msgstr "SSH キーの作成"

#: ..\remote_feature.rst:39
msgid ""
"Git uses SSH for accessing private repositories. SSH uses a public/private "
"key pair for authentication. This means you need to generate a private key "
"and a public key. The private key is stored on your computer locally and the"
" public key can be given to anyone. SSH will encrypt whatever you send using"
" your secret private key. The receiver will then use the public key you send"
" to decrypt the data."
msgstr "Git はプライベートリポジトリにアクセスするために SSH を使用します。SSH は、認証に公開鍵と秘密鍵のペアを使用します。これは、秘密鍵と公開鍵を生成する必要があることを意味します。秘密鍵はあなたのコンピュータにローカルに保存され、公開鍵は誰にでも渡せます。SSH は、あなたが送信するものを、あなたの秘密の秘密鍵を使って暗号化します。そして受信者は、あなたが送った公開鍵を使ってデータを復号化します。"

#: ..\remote_feature.rst:44
msgid ""
"This encryption will not protect the data itself but it protects the "
"authenticity. Because the private key is only available to the sender, the "
"receiver can be sure about the origin of the data. In practise the key pair "
"is only used for the authentication process. The data itself will be "
"encrypted using a key that is exchanged during this initial phase."
msgstr "この暗号化は、データそのものを保護するものではありませんが、真正性を保護するものです。秘密鍵は送信者のみが利用できるため、受信者はデータの出所を確認できます。実際のところ、キーペアは認証処理にのみ使用されます。データそのものは、この初期段階で交換される鍵を使って暗号化されます。"

#: ..\remote_feature.rst:49
msgid "PuTTY and github"
msgstr "PuTTY と GitHub"

#: ..\remote_feature.rst:51
msgid ""
"PuTTY is SSH client that for Windows that is a bit more user friendly then "
"OpenSSH. Unfortunately PuTTY does not work with all servers. In this "
"paragraph I will show how to generate a key for github using putty."
msgstr "PuTTY は Windows 用の SSH クライアントであり、OpenSSH よりも少し使い勝手がいいです。残念ながら、PuTTY はすべてのサーバーで動作するわけではありません。この段落では、PuTTY を使って GitHub 用の鍵を生成する方法を紹介します。"

#: ..\remote_feature.rst:54
msgid ""
"First make sure GitExtensions is configured to use PuTTY and all paths are "
"correct."
msgstr "まず、GitExtensions が PuTTY を使うように設定されていることと、すべてのパスが正しいことを確認します。"

#: ..\remote_feature.rst:60
msgid "can choose ``Generate or import key`` to start the key generator."
msgstr "「キーを生成/インポート」を選択することで、キージェネレーターを起動できます。"

#: ..\remote_feature.rst:66
msgid ""
"PuTTY will ask you to move the mouse around to generate a more random key. "
"When the key is generated you can save the public and the private key in a "
"file. You can choose to protect the private key with a password but this is "
"not necessary."
msgstr "PuTTY は、よりランダムなキーを生成するために、マウスを動かすように指示します。鍵が生成されたら、公開鍵と秘密鍵をファイルに保存できます。秘密鍵をパスワードで保護することもできますが、これは必須ではありません。"

#: ..\remote_feature.rst:69
msgid ""
"Now you have a key pair you need to give github the public key. This can be "
"done in ``Account Settings`` in the tab ``SSH Public Keys``. You can add "
"multiple keys here, but you only need one key for all repositories."
msgstr "これでキーペアができたので、GitHub に公開鍵を渡す必要があります。これは「アカウント設定」の「SSH 公開鍵」タブでできます。ここで複数のキーを追加できますが、すべてのリポジトリに必要なキーは 1 つだけです。"

#: ..\remote_feature.rst:74
msgid ""
"After telling github what public key to use to decrypt, you need to tell "
"GitExtensions what private key to use to encrypt. In the clone dialog there "
"is a ``Load SSH key`` button to load the private key into the PuTTY "
"authentication agent. This can also be done manually by starting the PuTTY "
"authentication agent and choose ``add key`` in the context menu in the "
"system tray."
msgstr "GitHub に復号に使う公開鍵を伝えたら、次は GitExtensions に暗号化に使う秘密鍵を伝える必要があります。クローンダイアログには「SSH キーを読み込む」ボタンがあり、秘密鍵を PuTTY 認証エージェントに読み込めます。これは手動で行うこともできます。PuTTY 認証エージェントを起動し、システムトレイのコンテキストメニューから「キーを追加」を選択します。"

#: ..\remote_feature.rst:80
msgid ""
"GitExtensions can load the private keys automatically for you when "
"communicating with a remote. You need to configure the private key for the "
"remote."
msgstr "GitExtensions は、リモートとの通信時に秘密鍵を自動的に読み込めます。リモートの秘密鍵を設定する必要があります。"

#: ..\remote_feature.rst:83
msgid "This is done in the ``Manage remote repositories`` dialog."
msgstr "これは「リモートリポジトリの管理」ダイアログで行います。"

#: ..\remote_feature.rst:86
msgid "OpenSSH and github"
msgstr "OpenSSH と GitHub"

#: ..\remote_feature.rst:88
msgid ""
"When you choose to use OpenSSH you need to configure GitExtensions as shown "
"in the screenshot below."
msgstr "OpenSSH を使う場合は、以下のスクリーンショットのように GitExtensions を設定する必要があります。"

#: ..\remote_feature.rst:92
msgid ""
"OpenSSH is the best SSH client there is but it lacks Windows support. "
"Therefore it is slightly more complex to use. Another drawback is that "
"GitExtensions cannot control OpenSSH and needs to show the command line "
"dialogs when OpenSSH might be used. GitExtensions will show the command line"
" window for every command that might require a SSH connection. For this "
"reason PuTTY is the prefered SSH client in GitExtensions."
msgstr "OpenSSH は最高の SSH クライアントですが、Windows のサポートがありません。そのため、使うには少し複雑です。もうひとつの欠点は、GitExtensions は OpenSSH を制御できないことです。OpenSSH が使われる可能性があるときは、コマンドラインのダイアログを表示する必要があります。GitExtensions は、SSH 接続を必要とする可能性のあるすべてのコマンドについて、コマンドラインウィンドウを表示します。このため、GitExtensions では PuTTY が推奨 SSH クライアントとなっています。"

#: ..\remote_feature.rst:97
msgid ""
"To generate a key pair in OpenSSH you need to go to the command line. I "
"recommend to use the git bash because the path to OpenSSH is already set."
msgstr "OpenSSH でキーペアを生成するには、コマンドラインに移動する必要があります。OpenSSH へのパスが既に設定されているので、git bash の使用をお勧めします。"

#: ..\remote_feature.rst:102
msgid ""
"Type the following command: ``ssh-keygen -C \"your@email.com\" -t rsa`` Use "
"the same email address as the email address used in git. You will be asked "
"where if you want to protect the private key with a password. This is not "
"necessary. By default the public and private keys are stored in "
"``c:\\Documents and Settings\\[User]\\.ssh\\`` or "
"``c:\\Users\\[user]\\.ssh\\``."
msgstr "以下のコマンドを入力します: ``ssh-keygen -C \"あなたのメールアドレス\" -t rsa``。git で使用しているメールアドレスと同じものを使用してください。ここで、秘密鍵をパスワードで保護するかどうか尋ねられます。これは必要ありません。デフォルトでは、公開鍵と秘密鍵は ``c:\\Documents and Settings\\[ユーザー名]\\.ssh\\``または ``c:\\Users\\[ユーザー名]\\.ssh\\`` に格納されています。"

#: ..\remote_feature.rst:109
msgid ""
"You do not need to tell GitExtensions about the private key because OpenSSH "
"will load it for you. Now open the public key using notepad and copy the key"
" to github. This can be done in ``Account Settings`` in the tab ``SSH Public"
" Keys`` on `GitHub <http://www.github.com>`_."
msgstr "秘密鍵は OpenSSH が読み込んでくれるため、GitExtensions に伝える必要はありません。公開鍵をメモ帳で開き、その鍵を GitHub にコピーします。これは `GitHub <http://www.github.com>`_ の「アカウント設定」のタブ「SSH 公開鍵」で行うことができます。"

#: ..\remote_feature.rst:116
msgid "Pull changes"
msgstr "変更のプル"

#: ..\remote_feature.rst:118
msgid ""
"You can get remote changes using the pull function. Before you can pull "
"remote changes you need to make sure there are no uncommitted changes in "
"your local repository. If you have uncommitted changes you should commit "
"them or stash them during the pull. You can read about how to use the stash "
"in the Stash chapter."
msgstr "プル機能を使うと、リモートでの変更を取得するできます。リモートの変更をプルする前に、ローカルリポジトリに未コミットの変更がないことを確認する必要があります。未コミットの変更がある場合は、コミットするか、またはプル中にスタッシュする必要があります。スタッシュの使い方については、スタッシュの章を参照してください。"

#: ..\remote_feature.rst:124
msgid ""
"In order to get your personal repository up-to-date, you need to fetch "
"changes from a remote repository. You can do this using the ``Pull`` dialog."
" When the dialog starts the default remote for the current branch is set. "
"You can choose another remote or enter a custom url if you like. When the "
"remote branches configured correctly, you do not need to choose a remote "
"branch."
msgstr "個人リポジトリを最新の状態にするためには、リモートリポジトリから変更を取得する必要があります。これは「プル」ダイアログを使用して行うことができます。ダイアログが起動すると、現在のブランチのデフォルトのリモートが設定されます。お好みで他のリモートを選択したり、カスタム URL を入力できます。リモートブランチが正しく設定されている場合、リモートブランチを選択する必要はありません。"

#: ..\remote_feature.rst:128
msgid ""
"If you just fetch the commits from the remote repository and you already "
"committed some changes to your local repository, the commits will be in a "
"different branch. In the pull dialog this is illustrated in the image on the"
" left. This can be useful when you want to review the changes before you "
"want to merge them with your own changes."
msgstr "リモートリポジトリからコミットを取得したときに、既にローカルリポジトリに変更をコミットしていた場合、そのコミットは別のブランチになります。プルダイアログでは、これを左の画像に示しています。これは、自分の変更点とマージする前に、変更点を確認したい場合に便利です。"

#: ..\remote_feature.rst:135
msgid ""
"When you choose to merge the remote branch after fetching the changes a "
"branch will be created, and will be merged into your commit. Doing this "
"creates a lot of branches and merges, making the history harder to read."
msgstr "変更をフェッチした後にリモートブランチをマージすることを選択すると、ブランチが作成され、あなたのコミットにマージされます。これを行うと、多くのブランチとマージが作成され、履歴が読みづらくなります。"

#: ..\remote_feature.rst:140
msgid ""
"Instead of merging the fetched commits with your local commits, you can also"
" choose to rebase your commits on top of the fetched commits. This is "
"illustrated on the left in the image below. A rebase will first undo your "
"local commits (c and d), then fetch the remote commits (e) and finally "
"recommit your local commits. When there is a merge conflict during the "
"rebase, the rebase dialog will show."
msgstr "フェッチしたコミットを自分のローカルコミットにマージする代わりに、取得したコミットの上に自分のコミットをリベースすることもできます。これは下の画像の左側に描かれています。リベースは、まずローカルコミットを元に戻し (c と d)、次にリモートコミットを取得し (e)、最後にローカルコミットを再修正します。リベース中にマージ競合が発生した場合、リベースダイアログが表示されます。"

#: ..\remote_feature.rst:147
msgid "Next to the pull button there are some buttons that can be useful:"
msgstr "プルボタンの隣には、便利なボタンがいくつかあります:"

#: ..\remote_feature.rst:150
msgid "Solve conflicts"
msgstr "競合を解決"

#: ..\remote_feature.rst:150
msgid ""
"When there are merge conflicts, you can solve them by pressing this button."
msgstr "マージ競合が発生した場合、このボタンを押すことで解決できます。"

#: ..\remote_feature.rst:152
msgid "Stash changes"
msgstr "変更をスタッシュ"

#: ..\remote_feature.rst:152
msgid ""
"When the working dir contains uncommitted changes, you need to stash them "
"before pulling."
msgstr "作業ディレクトリに未コミットの変更が含まれている場合、プルする前にそれらをスタッシュする必要があります。"

#: ..\remote_feature.rst:154
msgid "Auto stash"
msgstr "自動的にスタッシュ"

#: ..\remote_feature.rst:154
msgid ""
"Check this checkbox if you want to stash before pulling. The stash will be "
"reapplied after pulling."
msgstr "プルする前にスタッシュする場合は、このチェックボックスをオンにします。プルした後、スタッシュが再適用されます。"

#: ..\remote_feature.rst:156
msgid "Load SSH key"
msgstr "SSH キーを読み込む"

#: ..\remote_feature.rst:156
msgid ""
"This button is only available when you use PuTTY as SSH client. You can "
"press this button to load the key configured for the remote. If no key is "
"set, a dialog will prompt for the key."
msgstr "このボタンは、SSH クライアントとして PuTTY を使用する場合のみ有効です。このボタンを押すと、リモートに設定されている鍵を読み込めます。鍵が設定されていない場合は、鍵の入力を求めるダイアログが表示されます。"

#: ..\remote_feature.rst:161
msgid "Push changes"
msgstr "変更のプッシュ"

#: ..\remote_feature.rst:163
msgid ""
"In the browse window you can check if there are local commits that are not "
"pushed to a remote repository yet. In the image below the green labels mark "
"the position of the master branch on the remote repository. The red label "
"marks the position of the master branch on the local repository. The local "
"repository is ahead three commits."
msgstr "ブラウズウィンドウでは、まだリモートリポジトリにプッシュされていないローカルコミットがあるかどうかを確認できます。下の画像では、緑のラベルがリモートリポジトリの master ブランチの位置を示しています。赤いラベルは、ローカルリポジトリのマスターブランチの位置を示しています。ローカルリポジトリは 3 コミット進んでいます。"

#: ..\remote_feature.rst:169
msgid "To push the changes press ``Push`` in the toolbar."
msgstr "変更をプッシュするには、ツールバーの「プッシュ」を押してください。"

#: ..\remote_feature.rst:173
msgid ""
"The push dialog allows you to choose the remote repository to push to. The "
"remote repository is set to the remote of the current branch. You can choose"
" another remote or choose a url to push to. You can also specify a branch to"
" push."
msgstr "プッシュダイアログでは、プッシュ先のリモートリポジトリを選択できます。リモートリポジトリは、現在のブランチのリモートに設定されています。他のリモートを選択したり、プッシュ先の URL を選択することもできます。また、プッシュするブランチを指定することもできます。"

#: ..\remote_feature.rst:178
msgid ""
"Tags are not pushed to the remote repository. If you want to push a tag you "
"need to open the ``Tags`` tab in the dialog. You can choose to push a singe "
"tag or all tags. No commits will be pushed when the ``Tags`` tab is "
"selected, only tags."
msgstr "タグはリモートリポジトリにプッシュされません。タグをプッシュしたい場合は、ダイアログの「タグ」タブを開く必要があります。単一のタグをプッシュするか、すべてのタグをプッシュするかを選択できます。「タグ」タブが選択されている場合、コミットはプッシュされず、タグのみがプッシュされます。"

#: ..\remote_feature.rst:181
msgid ""
"You can not merge your changes in the remote repository. Merging must be "
"done locally. This means that you cannot push your changes before the "
"commits are merged locally. In practice you need to pull before you can push"
" most of the times."
msgstr "リモートリポジトリで変更した内容をマージすることはできません。マージはローカルで行う必要があります。つまり、ローカルでコミットがマージされる前に変更をプッシュすることはできないのです。実際には、ほとんどの場合、プッシュする前にプルする必要があります。"
