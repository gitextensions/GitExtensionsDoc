# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, GitExtensions
# This file is distributed under the same license as the GitExtensions package.
# 
# Translators:
# ryo_ta <ryota.prv+github@gmail.com>, 2020
# Shimamoto Takuya, 2019
# Yuki Shira <shirayuking@gmail.com>, 2019,2023
# 浮穴 卓弥 <ukiana@kbit.co.jp>, 2020
msgid ""
msgstr ""
"Project-Id-Version: Git Extensions Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-24 23:16+0300\n"
"PO-Revision-Date: 2015-05-24 19:18+0000\n"
"Last-Translator: Yuki Shira <shirayuking@gmail.com>, 2019,2023\n"
"Language-Team: Japanese (http://app.transifex.com/git-extensions/git-extensions-manual/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ..\branches.rst:2
msgid "Branches"
msgstr "ブランチ"

#: ..\branches.rst:7
msgid ""
"Branches are used to commit changes separate from other commits. It is very "
"common to create a new branch when you start working on a feature to keep "
"the work done on that feature separate from other work. When the feature is "
"complete the branch can be merged or rebased as you choose such that the "
"commits for the feature either remain as a parallel branch or appear as a "
"continuous single line of development as if the branch had never existed in "
"the first place. The image on the right illustrates a branch created on top "
"of commit B."
msgstr "ブランチは他のコミットとは別に変更をコミットするために使われます。機能に対する作業を開始するときに新しいブランチを作成して、その機能に対する作業を他の作業とは別にすることがよくあります。機能が完成すると、機能に対するコミットが並列ブランチとして残るか、あたかもブランチが最初に存在しなかったかのように連続した単一の開発ラインとして現れるように、ブランチをマージまたはリベースできます。右側の図は、コミットBの上に作成されたブランチを示しています。"

#: ..\branches.rst:13
msgid ""
"You can see the name of your current branch in a combo box in the toolbar. "
"You can switch to another branch by choosing from the combo box list. In the"
" commit log the current branch has an arrow head to the left of its name. If"
" you are not currently on a branch because you have checked out a specific "
"commit but not any particular branch then Git Extensions will show ``(no "
"branch)`` in place of a branch name in the toolbar. This is called "
"\"Detached HEAD mode\". In Git you can refer to your current branch or "
"commit by the special reference ``HEAD`` in place of the branch name or "
"commit reference."
msgstr "現在のブランチの名前はツールバーのコンボボックスに表示されます。コンボボックスのリストから選択することで、他のブランチに切り替えることができます。コミットログでは、現在のブランチの名前の左側に矢印があります。特定のコミットをチェックアウトしたものの、特定のブランチをチェックアウトしていないために、現在のブランチにいない場合、Git Extensionsはツールバーのブランチ名の代わりに“（no branch）”を表示します。 これを「分離ヘッドモード」と呼びます。Gitでは、ブランチ名やコミット参照の代わりに特別な参照“HEAD”を使って現在のブランチやコミットを参照することができます。"

#: ..\branches.rst:23
msgid "Create branch"
msgstr "ブランチの作成"

#: ..\branches.rst:25
msgid ""
"In Git Extensions there are multiple ways to create a new branch. In the "
"image below I create a new branch from the context menu in the commit log. "
"This will create a new branch on the revision that is selected."
msgstr "Git Extensionsでは、新しいブランチを作成する方法が複数あります。下の画像では、コミットログのコンテキストメニューから新しいブランチを作成しています。これにより、選択したリビジョンに新しいブランチが作成されます。"

#: ..\branches.rst:30
msgid ""
"I will create a new branch called ``Refactor``. In this branch I can do "
"whatever I want without affecting others. The default in Git Extensions is "
"to check out a new branch after it is created. If you want to create a new "
"branch but remain on your current branch, uncheck the ``Checkout after "
"create`` checkbox in the ``Create branch`` dialog."
msgstr "“Refactor”と呼ばれる新しいブランチを作ります。このブランチでは、他の人に影響を与えずに自分がやりたいことは何でもできます。Git Extensionsのデフォルトでは、新しいブランチが作成された後にそれをチェックアウトします。新しいブランチを作成したいものの、現在のブランチのままにしたい場合は、“Create branch”ダイアログの“Checkout after create”チェックボックスのチェックを外してください。"

#: ..\branches.rst:36
msgid ""
"When the branch is created you will see the new branch ``Refactor`` in the "
"commit log. If you chose to checkout this branch the next commit will be "
"committed to the new branch."
msgstr "ブランチが作成されると、コミットログに新しいブランチ“Refactor”が現れます。このブランチをチェックアウトすることを選択した場合、次のコミットは新しいブランチにコミットされます。"

#: ..\branches.rst:41
msgid ""
"Creating branches in Git requires only 41 bytes of space in the repository. "
"Creating a new branch is very easy and fast. The complete work flow of Git "
"is optimized for branching and merging."
msgstr "Gitでブランチを作成するには、リポジトリに41バイトのスペースしか必要ありません。新しいブランチを作るのはとても簡単で速いです。Gitにおいて、すべてのワークフローは、分岐とマージのために最適化されています。"

#: ..\branches.rst:45
msgid "Orphan branches"
msgstr "親のないブランチ"

#: ..\branches.rst:46
msgid ""
"In special cases it is helpful to have orphan branches (see for example "
"https://www.google.com/search?q=why+use+orphan+branches+in+git). Check the "
"\"Create orphan\" checkbox to create an orphan branch (``--orphan`` option "
"in git)."
msgstr "特別な場合には、親のないブランチがあると便利です（https://www.google.com/search?q=why+use+orphan+branches+in+gitなどを参照）。“Create orphan”チェックボックスにチェックを入れ、親のないブランチを作成します（gitの“--orphan”オプション）。"

#: ..\branches.rst:49
msgid "The newly created branch will have no parent commits."
msgstr "新しく作成されたブランチには、親となるコミットはありません。"

#: ..\branches.rst:51
msgid ""
"The option \"Clear working dir and index\" (``git rm -rf``) is active by "
"default. So the working dir and index will be cleared. If you uncheck the "
"last option then the working dir and index will not be touched."
msgstr "”作業ディレクトリとインデックスのクリア”オプション(``git rm -rf``)はデフォルトで有効になっています。そのため作業ディレクトリとインデックスはクリアされます。もしこのオプションのチェックを外した場合は作業ディレクトリとインデックスは操作されなくなります。"

#: ..\branches.rst:55
msgid "Checkout branch"
msgstr "ブランチのチェックアウト"

#: ..\branches.rst:57
msgid ""
"You can switch from the current branch to another branch using the checkout "
"command. Checking out a branch sets the current branch and updates all of "
"the source files in the working directory. Uncommitted changes in the "
"working directory can be overwritten so it is best practice to make sure "
"your working directory is clean by either committing or stashing any current"
" changes before checking out a branch. If you do not clean your working "
"directory then, in the ``Checkout branch`` dialog, you can choose between "
"four options for your local uncommitted changes:"
msgstr "現在のブランチから別のブランチに切り替えるには、checkoutコマンドを使用します。 ブランチをチェックアウトすると、現在のブランチが設定され、作業ディレクトリ内のすべてのソースファイルが更新されます。 作業ディレクトリでコミットされていない変更は上書きされる可能性があるため、ブランチをチェックアウトする前に、現在の変更をコミットまたは隠しておくことにより、作業ディレクトリがクリーンであることを確認することをお勧めします。 作業ディレクトリをクリーンアップしない場合は、「チェックアウトブランチ」ダイアログで、ローカルのコミットされていない変更について4つのオプションから選択できます。"

#: ..\branches.rst:64
msgid "``Don't change``"
msgstr "変更しないでください"

#: ..\branches.rst:64
msgid ""
"Local changes will be retained if there are not conflicting changes from the"
" branch you are checking out."
msgstr "チェックアウトするブランチからの競合する変更がない場合、ローカルの変更は保持されます。"

#: ..\branches.rst:66
msgid "``Merge``"
msgstr "「マージ」"

#: ..\branches.rst:66
msgid ""
"Performs a three-way merge between your current branch, your local changes "
"and the branch you are checking out."
msgstr "現在のブランチ、ローカルの変更、チェックアウトするブランチの間で3者間マージを実行します。"

#: ..\branches.rst:68
msgid "``Stash``"
msgstr "「スタッシュ」"

#: ..\branches.rst:68
msgid ""
"Your local changes are stashed and the new branch is checked out. You can "
"retrieve your changes on the new branch with stash-pop."
msgstr "ローカルの変更はstashされ、新しいブランチがチェックアウトされます。 stash-popを使用して、新しいブランチで変更を取得できます。"

#: ..\branches.rst:70
msgid "``Reset``"
msgstr "「リセット」"

#: ..\branches.rst:70
msgid ""
"Your local changes are discarded and the new branch is checked out. Use "
"caution with this option as Git has no record of uncommitted changes so they"
" cannot be retrieved."
msgstr "ローカルの変更は破棄され、新しいブランチがチェックアウトされます。 Gitにはコミットされていない変更の記録がないため、破棄された変更を取得できなくなるので、このオプションには注意してください。"

#: ..\branches.rst:76
msgid "Merge branches"
msgstr "ブランチのマージ"

#: ..\branches.rst:78
msgid ""
"In the image below there are two branches, ``[Refactor]`` and ``[master]``. "
"We can merge the commits from the master branch into the Refactor branch. If"
" we do this, the Refactor branch will be up to date with the master branch, "
"but not the other way around. As long as we are working on the Refactor "
"branch we cannot touch the master branch itself. We can merge the sources of"
" master into our branch, but cannot make any change to the master branch."
msgstr "下の画像には、「[Refactor]」と「[master]」という2つのブランチがあります。 masterブランチのコミットをRefactorブランチにマージできます。 これを行うと、Refactorブランチはmasterブランチで最新の状態になりますが、逆ではありません。 リファクタリングブランチで作業している限り、マスターブランチ自体に触ることはできません。 masterのソースをブランチにマージできますが、masterブランチに変更を加えることはできません。"

#: ..\branches.rst:85
msgid ""
"To merge the Refactor branch into the master branch, we first need to switch"
" to the master branch."
msgstr "Refactorブランチをmasterブランチにマージするには、最初にmasterブランチに切り替える必要があります。"

#: ..\branches.rst:89
msgid ""
"Once we are on the master branch we can choose merge by choosing ``Merge "
"branches`` from the ``Commands`` menu. In the merge dialog you can verify "
"which branch you are working on. Select the branch to merge with then click "
"the ``Merge`` button."
msgstr "マスターブランチに切り替えたら、「コマンド」メニューから「ブランチのマージ」を選択してマージを選択できます。 マージダイアログでは、作業中のブランチを確認できます。 マージするブランチを選択し、「マージ」ボタンをクリックします。"

#: ..\branches.rst:94
msgid ""
"After the merge the commit log will show the new commit containing the "
"merge. Notice that the Refactor branch is not changed by this merge. If you "
"want to continue working on the Refactor branch you can merge the Refactor "
"branch with master. You can instead delete the Refactor branch if it is not "
"used anymore."
msgstr "マージ後、コミットログにはマージを含む新しいコミットが表示されます。 このマージによってRefactorブランチが変更されないことに注意してください。 Refactorブランチで作業を続けたい場合は、Refactorブランチをmasterブランチとマージできます。 Refactorブランチが使用されなくなった場合は、代わりに削除できます。"

#: ..\branches.rst:102
msgid ""
"When you need to merge with an unnamed branch you can use a tag to give it a"
" temporary name."
msgstr "名前のないブランチとマージする必要がある場合は、タグを使用して一時的な名前を付けることができます。"

#: ..\branches.rst:105
msgid "Rebase branch"
msgstr "ブランチのリベース"

#: ..\branches.rst:107
msgid ""
"The rebase command is the most complex command in Git. The rebase command is"
" very similar to the merge command. Both rebase and merge are used to get a "
"branch up-to-date. The main difference is that rebase can be used to keep "
"the history linear contrary to merges."
msgstr "rebaseコマンドは、Gitで最も複雑なコマンドです。 rebaseコマンドは、mergeコマンドによく似ています。 リベースとマージの両方を使用して、ブランチを最新の状態にします。 主な違いは、リベースはマージとは異なり履歴を線形に保つことができることです。"

#: ..\branches.rst:113
msgid ""
"A rebase of Refactor on top of master will perform the following actions:"
msgstr "masterブランチ上でRefactorブランチをリベースすると、次のアクションが実行されます:"

#: ..\branches.rst:115
msgid ""
"All commits specific to the Refactor branch will be stashed in a temporary "
"location"
msgstr "Refactorブランチに固有のすべてのコミットは一時的な場所にstashされます"

#: ..\branches.rst:116
msgid "The branch Refactor will be removed"
msgstr "Refactor ブランチは除去されます"

#: ..\branches.rst:117
msgid "The branch Refactor will be recreated on the master branch"
msgstr "Refactorブランチはmasterブランチで再作成されます"

#: ..\branches.rst:118
msgid "All commits will be recommitted in the new Refactor branch"
msgstr "すべてのコミットは新しいRefactorブランチに再コミットされます"

#: ..\branches.rst:120
msgid ""
"During a rebase merge conflicts can occur. You need to solve the merge "
"conflicts for each commit that is rebased. The rebase function in Git "
"Extensions will guide you through all steps needed for a successful rebase."
msgstr "リベース中にマージの競合が発生する可能性があります。 リベースするコミットごとにマージの競合を解決する必要があります。 Git Extensionsのリベース機能は、正常なリベースに必要なすべてのステップをガイドします。"

#: ..\branches.rst:125
msgid ""
"The image below shows the commit log after the rebase. Notice that the "
"history is changed and it seems like the commits on the Refactor branch are "
"created after the commits on the master branch."
msgstr "以下の画像は、リベース後のコミットログを示しています。 履歴が変更され、masterブランチでのコミット後にRefactorブランチでのコミットが作成されたように見えることに注意してください。"

#: ..\branches.rst:132
msgid ""
"Because this function rewrites history you should only use this on branches "
"that are not published to other repositories yet. When you rebase a branch "
"that is already pushed it will be harder to pull or push to that remote. If "
"you want to get a branch up-to-date that is already published you should "
"merge."
msgstr "この機能は履歴を書き換えるため、これは他のリポジトリにまだ公開されていないブランチでのみ使用する必要があります。 すでにプッシュされているブランチをリベースすると、そのリモートにプルまたはプッシュするのが難しくなります。 すでに公開されている最新のブランチを取得したい場合は、マージする必要があります。"

#: ..\branches.rst:137
msgid "Delete branch"
msgstr "ブランチの削除"

#: ..\branches.rst:139
msgid ""
"Since it is common to create many branches, it is often necessary to delete "
"branches. Most commonly you will need to delete branches on which work has "
"finished and their contents are merged into master or your main branch. You "
"can also delete unmerged branches when they are not needed anymore and you "
"do not want to keep the work done in that branch."
msgstr "多くのブランチを作成することは一般的であるため、ブランチを削除する必要があることがよくあります。 ほとんどの場合、作業が終了し、その内容がmasterブランチまたはメインブランチにマージされたブランチを削除する必要があります。 マージされていないブランチが不要になり、そのブランチで作業を継続しない場合にも、ブランチを削除することもできます。"

#: ..\branches.rst:143
msgid ""
"When you delete a branch that is not yet merged, all of the commits that are"
" in only the deleted branch will be lost. When you delete a branch that is "
"already merged with another branch, the merged commits will not be lost "
"because they are also part of another branch."
msgstr "まだマージされていないブランチを削除すると、削除されたブランチのみにあるすべてのコミットが失われます。 すでに別のブランチとマージされているブランチを削除しても、それらは別のブランチの一部であるため、マージされたコミットは失われません。"

#: ..\branches.rst:147
msgid ""
"You can delete a branch using ``Delete branch`` from the ``Commands`` menu. "
"If you want to delete a branch that is not merged into your current branch "
"(``HEAD`` in Git), you need to check the ``Force delete`` checkbox."
msgstr "「コマンド」メニューの「ブランチの削除」を使用してブランチを削除できます。 現在のブランチ (Git の ``HEAD``)にマージされていないブランチを削除したい場合、``Force delete`` チェックボックスをチェックする必要があります。"
